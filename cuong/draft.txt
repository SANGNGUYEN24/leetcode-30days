//    public static void main(String[] args) {
//        Solution solution = new Solution();
//        System.out.println(solution.sumNumbers(new TreeNode(4, new TreeNode(9, new TreeNode(5), new TreeNode(1)), new TreeNode(0))));
//    }
//
//
//    public static class TreeNode {
//        int val;
//        TreeNode left;
//        TreeNode right;
//
//        TreeNode() {
//        }
//
//        TreeNode(int val) {
//            this.val = val;
//        }
//
//        TreeNode(int val, TreeNode left, TreeNode right) {
//            this.val = val;
//            this.left = left;
//            this.right = right;
//        }
//    }
//
//    static class Solution {
//        public int sumNumbers(TreeNode root) {
//            if (root == null) {
//                return 0;
//            }
//            return sumNumbersRootToLeaves(root, 0);
//        }
//
//        private int sumNumbersRootToLeaves(TreeNode node, int val) {
//
//            if (node == null) {
//                return 0;
//            }
//            int sum;
//            if (node.left == null && node.right == null) {
//                return val * 10 + node.val;
//            }
//
//            int left = sumNumbersRootToLeaves(node.left, val * 10 + node.val);
//            int right = sumNumbersRootToLeaves(node.right, val * 10 + node.val);
//
//            return left + right;
//        }
//    }


//    static class Solution {
//        public int trap(int[] height) {
//            int result = 0;
//            for (int i = 0; i < height.length - 2; i++) {
//                boolean flag = false;
//                if (height[i] <= height[i + 1])
//                    continue;
//                int occupy = height[i + 1];
//                int maxHeightPoint = i + 2;
//                int j;
//                for (j = i + 2; j < height.length; j++) {
//                    if (height[j] >= height[i]) {
//                        result += ((j - i - 1) * height[i] - occupy);
//                        i = j - 1;
//                        flag = true;
//                        break;
//                    }
//
//                    occupy += height[j];
//                    maxHeightPoint = height[maxHeightPoint] < height[j] ? j : maxHeightPoint;
//                }
//                if (!flag) {
//                    occupy = 0;
//                    for (int k = i + 1; k < maxHeightPoint; k++) {
//                        if (height[k] < height[maxHeightPoint]) {
//                            occupy += height[k];
//                        }
//                        else {
//                            occupy += height[maxHeightPoint];
//                        }
//                    }
//                    result += Math.abs((maxHeightPoint - i - 1) * height[maxHeightPoint] - occupy);
//                    i = maxHeightPoint - 1;
//                }
//            }
//            return result;
//        }
//    }

//    static class Solution {
//        public int monotoneIncreasingDigits(int n) {
//            if(n < 10){
//                return n;
//            }85. Maximal Rectangle
//            char[] digits =  String.valueOf(n).toCharArray();
//            for(int i = 1; i < digits.length; i++){
//                if(digits[i - 1] > digits[i]){
//                    for(int j = i; j < digits.length; j++){
//                        digits[j] = '9';
//                    }
//                    digits[i-1] = Character.forDigit(Character.getNumericValue(digits[i-1]) - 1, 10);
//                    i = i > 1 ? i - 2 : 0;
//                }
//            }
//
//            return Integer.parseInt(String.valueOf(digits));
//        }
//    }

//    static class Solution {
//        public String removeKdigits(String num, int k) {
//            if (k == 0)
//                return num;
//            String result = "";
//            for (int i = 0; i < num.length(); i++) {
//                if(k >= num.length()){
//                    return "0";
//                }
//                if(k > 0)
//                if (i == num.length() - 1) {
//                    num = num.substring(0, i);
//                    i = i > 1 ? i - 2 : i - 1;
//                    k--;
//                    if (k == 0) {
//                        break;
//                    }
//                } else if (Integer.parseInt(num.substring(i, i + 1)) > Integer.parseInt(num.substring(i + 1, i + 2))) {
//                    num =  remove0AtFirst(num.substring(0, i) + num.substring(i + 1));
//                    i = i >= 1 ? i - 2 : i - 1;
//                    k--;
//                    if (k == 0) {
//                        break;
//                    }
//                }
//            }
//            return num.isEmpty() ? "0" : num;
//        }
//
//        public String remove0AtFirst(String num) {
//            while (num.length() > 1 && num.charAt(0) == '0') {
//                num = num.substring(1);
//            }
//            return num;
//        }
//    }
//
//    class Solution {
//        public static String removeKdigits(String num, int k) {
//            char[] digits = num.toCharArray();
//            if (k == num.length()) {
//                return "0";
//            }
//
//            char[] stack = new char[digits.length];
//            int stackTop = -1;
//            int removalCount = k;
//
//            for (int i = 0; i < digits.length; i++) {
//                while (removalCount > 0 && stackTop >= 0 && stack[stackTop] > digits[i]) {
//                    stackTop--;
//                    removalCount--;
//                }
//                stackTop++;
//                stack[stackTop] = digits[i];
//            }
//
//            int nonZeroStart = 0;
//
//            while (stack[nonZeroStart] == '0' && nonZeroStart < digits.length - k - 1) {
//                nonZeroStart++;
//            }
//
//            return String.valueOf(stack, nonZeroStart, digits.length - k - nonZeroStart);
//        }
//    }